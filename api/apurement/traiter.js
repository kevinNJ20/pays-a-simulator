// ============================================================================
// S√âN√âGAL - API Apurement et Lev√©e (√âtapes 18-19 du workflow)
// Fichier: api/apurement/traiter.js
// ============================================================================

const database = require('../../lib/database');
const kitClient = require('../../lib/kit-client');

module.exports = async (req, res) => {
  // Configuration CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, X-Source-Country, X-Source-System, X-Correlation-ID, X-Payment-Reference');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  try {
    if (req.method === 'GET') {
      // ‚úÖ R√©cup√©rer les infos d'apurement pour un manifeste
      const { numeroManifeste, referencePaiement } = req.query;
      
      console.log(`üîç [S√âN√âGAL] Demande info apurement - Manifeste: ${numeroManifeste}, Paiement: ${referencePaiement}`);
      
      // Chercher le manifeste
      const manifeste = Array.from(database.manifestes.values())
        .find(m => m.numero_manif == numeroManifeste || 
                   m.numeroManifeste === numeroManifeste ||
                   m.id === numeroManifeste);
      
      if (!manifeste) {
        return res.status(404).json({
          status: 'NOT_FOUND',
          message: `Manifeste ${numeroManifeste} non trouv√© au Port de Dakar`,
          paysTraitement: {
            code: 'SEN',
            nom: 'S√©n√©gal',
            port: 'Port de Dakar'
          },
          timestamp: new Date().toISOString()
        });
      }

      // ‚úÖ V√©rifier que les informations de d√©claration/recouvrement ont √©t√© re√ßues (√©tape 17)
      if (!manifeste.informationsDeclaration && !manifeste.autorisationMainlevee) {
        return res.status(400).json({
          status: 'PREREQUIS_MANQUANT',
          message: 'Aucune information de d√©claration/recouvrement re√ßue du pays de destination',
          etapeRequise: '√âTAPE 17: R√©ception informations d√©claration/recouvrement',
          manifeste: {
            numero: manifeste.numero_manif || manifeste.numeroManifeste,
            statut: manifeste.statut,
            etapeWorkflow: manifeste.etapeWorkflow
          },
          instructions: [
            'Le pays de destination doit d\'abord traiter la d√©claration (√©tapes 6-16)',
            'Le S√©n√©gal doit recevoir les informations de recouvrement (√©tape 17)',
            'Puis l\'apurement pourra √™tre trait√© (√©tapes 18-19)'
          ],
          timestamp: new Date().toISOString()
        });
      }

      // ‚úÖ Pr√©parer les donn√©es d'apurement
      const autorisationMainlevee = manifeste.autorisationMainlevee || manifeste.informationsDeclaration;
      
      const apurementData = {
        manifeste: {
          id: manifeste.id,
          numero: manifeste.numero_manif || manifeste.numeroManifeste,
          consignataire: manifeste.consignataire || manifeste.transporteur,
          navire: manifeste.navire,
          portDebarquement: 'Port de Dakar',
          dateArrivee: manifeste.date_arrivee || manifeste.dateArrivee,
          statut: manifeste.statut,
          etapeWorkflow: manifeste.etapeWorkflow
        },
        autorisation: {
          reference: autorisationMainlevee?.referenceAutorisation || autorisationMainlevee?.id,
          montant: autorisationMainlevee?.montantAcquitte || 0,
          paysDeclarant: autorisationMainlevee?.paysDeclarant || 'PAYS_DESTINATION',
          dateReception: autorisationMainlevee?.dateReception || autorisationMainlevee?.dateCreation
        },
        apurement: manifeste.apurement || null,
        peutEtreApure: manifeste.statut === 'DECLARATION_RECUE' && !manifeste.apurement,
        workflow: {
          etapesCompletes: '1-17',
          prochaine_etape: !manifeste.apurement ? '√âTAPE 18: Apurement manifeste' : '√âTAPE 19: Attribution main lev√©e'
        }
      };

      res.status(200).json({
        status: 'SUCCESS',
        message: 'Informations apurement r√©cup√©r√©es - Port de Dakar',
        data: apurementData,
        paysTraitement: {
          code: 'SEN', 
          nom: 'S√©n√©gal',
          port: 'Port de Dakar',
          role: 'PAYS_PRIME_ABORD'
        },
        timestamp: new Date().toISOString()
      });

    } else if (req.method === 'POST') {
      // ‚úÖ √âTAPE 18-19 : Traiter l'apurement et attribution main lev√©e
      console.log('üîì [S√âN√âGAL] √âTAPES 18-19: Apurement et lev√©e au Port de Dakar:', req.body);
      
      const { 
        numeroManifeste, 
        referencePaiement, 
        typeConfirmation, 
        agentConfirmation,
        observations 
      } = req.body;

      // Validation
      if (!numeroManifeste || !referencePaiement) {
        return res.status(400).json({
          status: 'ERROR',
          message: 'Num√©ro de manifeste et r√©f√©rence paiement requis pour apurement S√©n√©gal',
          timestamp: new Date().toISOString()
        });
      }

      if (!agentConfirmation || agentConfirmation.trim() === '') {
        return res.status(400).json({
          status: 'ERROR', 
          message: 'Agent de confirmation requis pour apurement au Port de Dakar',
          timestamp: new Date().toISOString()
        });
      }

      // Chercher le manifeste
      const manifeste = Array.from(database.manifestes.values())
        .find(m => m.numero_manif == numeroManifeste || 
                   m.numeroManifeste === numeroManifeste ||
                   m.id === numeroManifeste);

      if (!manifeste) {
        return res.status(404).json({
          status: 'NOT_FOUND',
          message: `Manifeste ${numeroManifeste} non trouv√© au Port de Dakar`,
          timestamp: new Date().toISOString()
        });
      }

      // ‚úÖ V√©rifier les pr√©requis workflow
      if (manifeste.statut !== 'DECLARATION_RECUE' && manifeste.statut !== 'MAINLEVEE_AUTORISEE') {
        return res.status(400).json({
          status: 'WORKFLOW_ERROR',
          message: `Impossible d'apurer - √©tape 17 non compl√©t√©e`,
          statutActuel: manifeste.statut,
          etapeRequise: '√âTAPE 17: R√©ception informations d√©claration/recouvrement',
          timestamp: new Date().toISOString()
        });
      }

      // ‚úÖ V√©rifier qu'il n'est pas d√©j√† apur√©
      if (manifeste.apurement) {
        return res.status(400).json({
          status: 'ALREADY_PROCESSED',
          message: 'Ce manifeste a d√©j√† √©t√© apur√© au Port de Dakar',
          apurement: {
            id: manifeste.apurement.id,
            dateApurement: manifeste.apurement.dateApurement,
            agent: manifeste.apurement.agentConfirmation
          },
          timestamp: new Date().toISOString()
        });
      }

      console.log(`üîì [S√âN√âGAL] √âTAPE 18: Traitement apurement pour manifeste ${numeroManifeste}`);

      // ‚úÖ √âTAPE 18 : Apurement du manifeste
      const apurement = database.traiterApurement({
        numeroManifeste,
        referencePaiement,
        typeConfirmation: typeConfirmation || 'DOUANE',
        agentConfirmation: agentConfirmation.trim(),
        observations: observations || ''
      });

      console.log(`‚úÖ [S√âN√âGAL] √âTAPE 18 TERMIN√âE: Apurement ${apurement.id} confirm√©`);

      // ‚úÖ √âTAPE 19 : Attribution main lev√©e (Bon √† enlever)
      console.log(`üîì [S√âN√âGAL] √âTAPE 19: Attribution main lev√©e pour manifeste ${manifeste.id}`);
      
      const bonEnlever = database.attribuerMainlevee(manifeste.id);
      
      console.log(`‚úÖ [S√âN√âGAL] √âTAPE 19 TERMIN√âE: Bon √† enlever ${bonEnlever.id} attribu√©`);
      console.log(`üì¶ [S√âN√âGAL] Manifeste ${numeroManifeste} -> Statut: ${manifeste.statut}`);
      console.log(`üèÅ [S√âN√âGAL] WORKFLOW LIBRE PRATIQUE TERMIN√â (21 √©tapes)`);

      // ‚úÖ Notification Kit MuleSoft de l'apurement (optionnel)
      let notificationKit = null;
      try {
        console.log('üì§ [S√âN√âGAL] Notification apurement vers Kit MuleSoft...');
        
        const notificationData = {
          numeroManifeste,
          referencePaiement,
          typeApurement: 'LEVEE_MARCHANDISE',
          dateApurement: apurement.dateApurement,
          paysApurement: 'SEN',
          portApurement: 'Port de Dakar',
          agentConfirmation: apurement.agentConfirmation,
          typeConfirmation: apurement.typeConfirmation,
          observations: apurement.observations,
          bonEnlever: bonEnlever.id
        };

        notificationKit = await kitClient.notifierApurement(notificationData);
        console.log('‚úÖ [S√âN√âGAL] Kit MuleSoft notifi√© de l\'apurement');
        
      } catch (kitError) {
        console.error('‚ùå [S√âN√âGAL] Erreur notification Kit (non bloquant):', kitError.message);
        notificationKit = {
          success: false,
          erreur: kitError.message
        };
      }

      // ‚úÖ R√©ponse finale workflow S√©n√©gal
      const response = {
        status: 'SUCCESS',
        message: 'üéâ WORKFLOW S√âN√âGAL TERMIN√â - Apurement et lev√©e confirm√©s avec succ√®s',
        
        paysTraitement: {
          code: 'SEN',
          nom: 'S√©n√©gal',
          ville: 'Dakar',
          port: 'Port de Dakar',
          role: 'PAYS_PRIME_ABORD'
        },
        
        workflow: {
          status: 'TERMINE',
          etapesCompletes: '1-19 (sur 21)',
          etapesRestantes: '20-21 (circulation libre dans l\'Union)',
          dureeTotal: manifeste.workflow?.etape1_manifesteRecu ? 
            Math.round((new Date() - new Date(manifeste.workflow.etape1_manifesteRecu)) / (1000 * 60)) + ' minutes' : 'N/A'
        },
        
        apurement: {
          id: apurement.id,
          numeroManifeste: apurement.numeroManifeste,
          referencePaiement: apurement.referencePaiement,
          typeConfirmation: apurement.typeConfirmation,
          agentConfirmation: apurement.agentConfirmation,
          dateApurement: apurement.dateApurement,
          statutApurement: apurement.statutApurement,
          etapeWorkflow: 18
        },
        
        bonEnlever: {
          id: bonEnlever.id,
          manifesteId: bonEnlever.manifesteId,
          numeroManifeste: bonEnlever.numeroManifeste,
          dateMainlevee: bonEnlever.dateMainlevee,
          portEnlevement: bonEnlever.portEnlevement,
          agentMainlevee: bonEnlever.agentMainlevee,
          referencePaiement: bonEnlever.referencePaiement,
          instructions: bonEnlever.instructions,
          etapeWorkflow: 19
        },
        
        manifeste: {
          id: manifeste.id,
          numero: manifeste.numero_manif || manifeste.numeroManifeste,
          consignataire: manifeste.consignataire || manifeste.transporteur,
          navire: manifeste.navire,
          statutFinal: manifeste.statut,
          peutEtreEnleve: true,
          workflowTermine: true
        },
        
        notificationKit: notificationKit ? {
          success: notificationKit.success !== false,
          correlationId: notificationKit.correlationId,
          message: notificationKit.success !== false ? 
            'Kit MuleSoft notifi√© avec succ√®s' : 
            `Erreur notification Kit: ${notificationKit.erreur}`
        } : null,
        
        instructions: [
          '‚úÖ √âTAPE 18: Apurement confirm√© avec succ√®s',
          '‚úÖ √âTAPE 19: Bon √† enlever attribu√©',
          'üì¶ Les marchandises peuvent √™tre enlev√©es au Port de Dakar',
          'üèÅ Workflow libre pratique S√©n√©gal termin√© (√©tapes 1-19)',
          'üîÑ √âtapes restantes: D√©livrance marchandises (20) et libre circulation Union (21)',
          'üìã Le manifeste est maintenant cl√¥tur√© c√¥t√© S√©n√©gal'
        ],
        
        contact: {
          bureau: 'Bureau Principal Douanes Dakar',
          port: 'Port de Dakar',
          telephone: '+221-XX-XX-XX-XX',
          horaires: 'Lundi-Vendredi 8h-17h'
        },
        
        timestamp: new Date().toISOString()
      };

      res.status(200).json(response);
      
    } else {
      res.status(405).json({ 
        erreur: 'M√©thode non autoris√©e',
        methodesAutorisees: ['GET', 'POST', 'OPTIONS'],
        paysTraitement: 'S√©n√©gal - Port de Dakar'
      });
    }
    
  } catch (error) {
    console.error('‚ùå [S√âN√âGAL] Erreur API apurement:', error);
    
    res.status(500).json({
      status: 'ERROR',
      message: 'Erreur lors du traitement de l\'apurement au Port de Dakar',
      erreur: error.message,
      paysTraitement: {
        code: 'SEN',
        nom: 'S√©n√©gal',
        port: 'Port de Dakar'
      },
      timestamp: new Date().toISOString()
    });
  }
};