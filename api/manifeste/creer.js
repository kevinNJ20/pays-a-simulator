const database = require('../../lib/database');
const kitClient = require('../../lib/kit-client');

module.exports = async (req, res) => {
  // Configuration CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method === 'POST') {
    try {
      console.log('üìã [Pays A] Nouvelle demande cr√©ation manifeste:', req.body?.numeroManifeste);
      console.log('üìã [Pays A] Donn√©es re√ßues:', JSON.stringify(req.body, null, 2));

      // Validation des donn√©es
      const erreurs = validerDonneesManifeste(req.body);
      if (erreurs.length > 0) {
        console.error('‚ùå [Pays A] Validation √©chou√©e:', erreurs);
        return res.status(400).json({
          status: 'ERROR',
          message: 'Donn√©es manifeste invalides',
          erreurs,
          timestamp: new Date().toISOString()
        });
      }

      // √âtape 1: Cr√©er le manifeste localement TOUJOURS
      const manifeste = database.creerManifeste(req.body);
      console.log(`‚úÖ [Pays A] Manifeste cr√©√© localement: ${manifeste.id}`);
      console.log(`üìä [Pays A] Manifeste cr√©√©:`, JSON.stringify(manifeste, null, 2));

      // √âtape 2: Transmettre DIRECTEMENT au Kit MuleSoft
      let transmissionReussie = false;
      let reponseKit = null;
      let erreurTransmission = null;

      try {
        console.log(`üöÄ [Pays A] D√©but transmission DIRECTE vers Kit MuleSoft: ${manifeste.id}`);
        
        // ‚úÖ CORRECTION: Appel direct vers MuleSoft avec timeout plus long
        const startTime = Date.now();
        reponseKit = await Promise.race([
          kitClient.transmettreManifeste(manifeste),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout transmission Kit MuleSoft > 45s')), 45000)
          )
        ]);
        const duration = Date.now() - startTime;
        reponseKit.latence = duration;
        
        transmissionReussie = true;
        
        console.log(`‚úÖ [Pays A] Transmission Kit MuleSoft r√©ussie (${duration}ms):`, {
          manifesteId: manifeste.id,
          kitResponse: reponseKit.status,
          latence: reponseKit.latence,
          correlationId: reponseKit.correlationId
        });
        
      } catch (error) {
        console.error(`‚ùå [Pays A] Erreur transmission Kit MuleSoft:`, {
          manifesteId: manifeste.id,
          erreur: error.message,
          stack: error.stack,
          details: error.response?.data || error.cause
        });
        erreurTransmission = error.message;
        transmissionReussie = false;
        
        // ‚úÖ AM√âLIORATION: Enregistrer l'erreur avec plus de d√©tails
        reponseKit = {
          status: 'ERROR',
          message: error.message,
          erreur: error.message,
          timestamp: new Date(),
          latence: 0
        };
      }

      // √âtape 3: Enregistrer le r√©sultat de la transmission TOUJOURS
      try {
        database.enregistrerTransmissionKit(
          manifeste.id, 
          reponseKit || { erreur: erreurTransmission }, 
          transmissionReussie
        );
        console.log(`üìù [Pays A] Transmission Kit enregistr√©e pour manifeste ${manifeste.id}`);
      } catch (dbError) {
        console.error(`‚ùå [Pays A] Erreur enregistrement transmission:`, dbError);
        // Continue m√™me si l'enregistrement √©choue
      }

      // ‚úÖ CORRECTION: Mettre √† jour les statistiques TOUJOURS
      try {
        const statsUpdated = database.obtenirStatistiques();
        console.log(`üìä [Pays A] Statistiques mises √† jour:`, {
          manifestesCreees: statsUpdated.manifestesCreees,
          transmissionsKit: statsUpdated.transmissionsKit,
          transmissionsReussies: statsUpdated.transmissionsReussies
        });
      } catch (statsError) {
        console.error(`‚ùå [Pays A] Erreur mise √† jour statistiques:`, statsError);
      }

      // √âtape 4: Pr√©parer la r√©ponse
      const reponse = {
        status: transmissionReussie ? 'SUCCESS' : 'PARTIAL_SUCCESS',
        message: transmissionReussie 
          ? 'Manifeste cr√©√© et transmis au Kit MuleSoft avec succ√®s'
          : 'Manifeste cr√©√© mais erreur de transmission au Kit MuleSoft',
        
        manifeste: {
          id: manifeste.id,
          numeroManifeste: manifeste.numeroManifeste,
          transporteur: manifeste.transporteur,
          paysDestination: manifeste.marchandises?.[0]?.paysDestination,
          nombreMarchandises: manifeste.marchandises?.length || 0,
          statut: manifeste.statut,
          dateCreation: manifeste.dateCreation
        },
        
        // ‚úÖ CORRECTION: Informations d√©taill√©es sur la transmission MuleSoft
        transmission: {
          vers: 'Kit MuleSoft (Direct)',
          urlKit: kitClient.baseURL,
          reussie: transmissionReussie,
          timestamp: new Date().toISOString(),
          latence: reponseKit?.latence || null,
          correlationId: reponseKit?.correlationId || null,
          ...(reponseKit && transmissionReussie && { 
            reponseKit: {
              status: reponseKit.status,
              message: reponseKit.message,
              timestamp: reponseKit.timestamp
            }
          }),
          ...(erreurTransmission && { 
            erreur: erreurTransmission,
            detailsErreur: reponseKit,
            recommandation: 'V√©rifiez la connectivit√© avec Kit MuleSoft et les logs d√©taill√©s'
          })
        },
        
        prochainEtapes: transmissionReussie ? [
          'Le manifeste a √©t√© rout√© vers le pays de destination via Kit MuleSoft',
          'La Commission UEMOA a √©t√© notifi√©e automatiquement',
          'Attente de traitement par le pays destinataire',
          'Vous recevrez une autorisation de mainlev√©e apr√®s paiement'
        ] : [
          'Le manifeste est sauvegard√© localement dans le syst√®me Pays A',
          'Tentative de retransmission vers Kit MuleSoft recommand√©e',
          'V√©rifiez la connectivit√© r√©seau et le statut du Kit',
          'Contactez l\'administrateur si le probl√®me persiste'
        ],
        
        timestamp: new Date().toISOString()
      };

      const statusCode = transmissionReussie ? 200 : 206; // 206 = Partial Content
      res.status(statusCode).json(reponse);

      // Log pour monitoring avec d√©tails Kit
      console.log(`üìä [Pays A] R√©sum√© transmission manifeste ${manifeste.id}:`, {
        local: '‚úÖ SAUVEGARDE',
        kitMulesoft: transmissionReussie ? '‚úÖ TRANSMIS' : '‚ùå ECHEC',
        latence: reponseKit?.latence || 'N/A',
        destination: manifeste.marchandises?.[0]?.paysDestination,
        erreur: erreurTransmission || 'N/A'
      });
      
    } catch (error) {
      console.error('‚ùå [Pays A] Erreur cr√©ation manifeste:', {
        message: error.message,
        stack: error.stack,
        requestBody: req.body
      });
      
      res.status(500).json({
        status: 'ERROR',
        message: 'Erreur interne lors de la cr√©ation du manifeste',
        erreur: error.message,
        recommandation: 'V√©rifiez les logs serveur et la connectivit√© Kit MuleSoft',
        timestamp: new Date().toISOString()
      });
    }
  } else {
    res.status(405).json({ 
      erreur: 'M√©thode non autoris√©e',
      methodesAutorisees: ['POST', 'OPTIONS']
    });
  }
};

// Validation des donn√©es manifeste (am√©lior√©e avec logging)
function validerDonneesManifeste(donnees) {
  const erreurs = [];

  console.log('üîç [Pays A] Validation manifeste:', {
    hasData: !!donnees,
    numeroManifeste: donnees?.numeroManifeste,
    transporteur: donnees?.transporteur,
    marchandisesCount: donnees?.marchandises?.length
  });

  if (!donnees.numeroManifeste || donnees.numeroManifeste.trim() === '') {
    erreurs.push('Le num√©ro de manifeste est requis');
  }

  if (!donnees.transporteur || donnees.transporteur.trim() === '') {
    erreurs.push('Le transporteur est requis');
  }

  if (!donnees.dateArrivee) {
    erreurs.push('La date d\'arriv√©e est requise');
  }

  if (!donnees.marchandises || !Array.isArray(donnees.marchandises) || donnees.marchandises.length === 0) {
    erreurs.push('Au moins une marchandise est requise');
  } else {
    donnees.marchandises.forEach((marchandise, index) => {
      if (!marchandise.paysDestination) {
        erreurs.push(`Pays de destination requis pour la marchandise ${index + 1}`);
      }
      if (!marchandise.designation) {
        erreurs.push(`D√©signation requise pour la marchandise ${index + 1}`);
      }
      if (!marchandise.poidsBrut || marchandise.poidsBrut <= 0) {
        erreurs.push(`Poids brut valide requis pour la marchandise ${index + 1}`);
      }
    });
  }

  // Log des erreurs de validation
  if (erreurs.length > 0) {
    console.log(`‚ö†Ô∏è [Pays A] Validation manifeste √©chou√©e:`, erreurs);
  } else {
    console.log(`‚úÖ [Pays A] Validation manifeste r√©ussie`);
  }

  return erreurs;
}